# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1T9TpwLC5HGwijWPbTnFtwWoZ6_lDfhZD
"""

import numpy as np
import math
import matplotlib.pyplot as plt

def U(A, alpha):
    u = 0
    for i in range(len(A)):
        for j in range(len(A)):
            if i != j:
                distance = math.sqrt((A[i][0] - A[j][0])**2 + (A[i][1] - A[j][1])**2) # calcular distancia euclideana
                u += 1 / (distance**alpha)
    return u

def C(a, A, alpha, U_value):
    Ax = np.delete(A, a, axis=0) # Arreglo a excluyendo al elemento a
    c = U_value - U(Ax, alpha)
    return c

def getSstar(A, alpha, n):
  Sstar = A.copy() # copiar matriz para borrar los elementos más grandes de C en cada iteración del while
  c_values = [] # valores de C calculados por índice

  while len(Sstar) > n:
    print(len(Sstar))
    U_value = U(Sstar, alpha)
    # calcular C para cada elemento de S*
    for i in range(len(Sstar)):
        c_values.append(C(i, Sstar, alpha, U_value))

    # encontrar el índice con mayor valor de C y eliminarlo de la lista
    index_max_value = c_values.index(max(c_values))
    Sstar = np.delete(Sstar, index_max_value, axis=0)
    c_values.clear()

  return Sstar

alpha = 0.7
A = np.loadtxt('ZCAT1_1000_02D.pof')
n = 100

Sstar = getSstar(A, alpha, n)

# scatter plot original
plt.scatter(A[:, 0], A[:, 1])
plt.show()

# scatter plot con S*
plt.scatter(Sstar[:, 0], Sstar[:, 1])
plt.show()